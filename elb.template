{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Creates an ELB with a security group",
  "Parameters": {
    "ServiceName": {
      "Description": "The name of the service this belongs to",
      "AllowedPattern": "^[a-z0-9][a-z0-9-.]*$",
      "Type": "String"
    },
    "TechnicalOwner": {
      "Description": "A valid LDAP email",
      "AllowedPattern": "^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$",
      "Type": "String"
    },
    "Environment": {
      "Description": "Environment we are deploying into",
      "Default": "sandbox",
      "Type": "String",
      "AllowedValues": [
        "admin",
        "prod",
        "stage",
        "sandbox"
      ],
      "ConstraintDescription": "Must specify prod, stage, or sandbox."
    },
    "ElbHealthTarget": {
      "Description": "The protocol and url to use for checking the health of the service",
      "Type": "String",
      "Default": "HTTP:80/"
    },
    "SSLCertificate": {
      "Description": "The ARN of the SSL cerftificate to use for this ELB",
      "Type": "String",
      "AllowedPattern": "^arn:aws:iam::[0-9]+:server-certificate/.*$",
      "Default": "arn:aws:iam::0000:server-certificate/not-set"
    },
    "AccessLogging": {
      "Description": "Flag to enable Access Logging to an S3 bucket",
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "Must be true or false",
      "Default": "true"
    },
    "StacksVersion": {
      "Description": "Version of the Nubis Stacks",
      "Type": "String",
      "Default": "v1.2.0"
    }
  },
  "Conditions": {
    "AccessLogging": {
      "Fn::Equals": [
        {
          "Ref": "AccessLogging"
        },
        "true"
      ]
    },
    "NotSet_SSLCertificate": {
      "Fn::Equals": [
        {
          "Ref": "SSLCertificate"
        },
        "arn:aws:iam::0000:server-certificate/not-set"
      ]
    }
  },
  "Resources": {
    "MetaInfo": {
      "Type": "Custom::MetaInfo",
      "Properties": {
        "StacksVersion": {
          "Ref": "StacksVersion"
        },
        "ServiceToken": {
          "Fn::Join": [
            "",
            [
              "arn:aws:lambda:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":function:",
              "LookupNestedStackOutputs"
            ]
          ]
        },
        "StackName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::Region"
              },
              "vpc"
            ]
          ]
        },
        "SearchString": "VPCMeta"
      }
    },
    "VpcInfo": {
      "Type": "Custom::VpcInfo",
      "Properties": {
        "StacksVersion": {
          "Ref": "StacksVersion"
        },
        "ServiceToken": {
          "Fn::Join": [
            "",
            [
              "arn:aws:lambda:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":function:",
              "LookupNestedStackOutputs"
            ]
          ]
        },
        "StackName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::Region"
              },
              "vpc"
            ]
          ]
        },
        "SearchString": {
          "Ref": "Environment"
        }
      }
    },
    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Inbound ELB traffic rules",
        "VpcId": {
          "Fn::GetAtt": [
            "VpcInfo",
            "VpcId"
          ]
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "ServiceName"
            }
          },
          {
            "Key": "TechnicalOwner",
            "Value": {
              "Ref": "TechnicalOwner"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Purpose",
            "Value": "Load Balancer Security Group"
          },
          {
            "Key": "Backups",
            "Value": "Nightly"
          },
          {
            "Key": "Shutdown",
            "Value": "Never"
          }
        ]
      }
    },
    "ELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
            "Fn::GetAtt": [
              "VpcInfo",
              "PublicSubnetAZ1"
            ]
          },
          {
            "Fn::GetAtt": [
              "VpcInfo",
              "PublicSubnetAZ2"
            ]
          },
          {
            "Fn::GetAtt": [
              "VpcInfo",
              "PublicSubnetAZ3"
            ]
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "ELBSecurityGroup"
          },
          {
            "Fn::GetAtt": [
              "VpcInfo",
              "InternetAccessSecurityGroupId"
            ]
          },
          {
            "Fn::GetAtt": [
              "VpcInfo",
              "SharedServicesSecurityGroupId"
            ]
          }
        ],
        "CrossZone": true,
        "Listeners": [
          {
            "InstancePort": "80",
            "InstanceProtocol": "HTTP",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP"
          },
          {
            "InstancePort": "80",
            "InstanceProtocol": "HTTP",
            "LoadBalancerPort": "443",
            "Protocol": "HTTPS",
            "SSLCertificateId": {
              "Fn::If": [
                "NotSet_SSLCertificate",
                {
                  "Fn::GetAtt": [
                    "MetaInfo",
                    "DefaultServerCertificate"
                  ]
                },
                {
                  "Ref": "SSLCertificate"
                }
              ]
            }
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "2",
          "Timeout": "3",
          "Target": {
            "Ref": "ElbHealthTarget"
          },
          "Interval": "30"
        },
        "AccessLoggingPolicy": {
          "Fn::If": [
            "AccessLogging",
            {
              "EmitInterval": 5,
              "Enabled": true,
              "S3BucketName": {
                "Fn::GetAtt": [
                  "VpcInfo",
                  "AccessLoggingBucket"
                ]
              }
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "Tags": [
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "ServiceName"
            }
          },
          {
            "Key": "TechnicalOwner",
            "Value": {
              "Ref": "TechnicalOwner"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Purpose",
            "Value": "Web Load Balancer"
          },
          {
            "Key": "Backups",
            "Value": "Nightly"
          },
          {
            "Key": "Shutdown",
            "Value": "Never"
          }
        ]
      }
    }
  },
  "Outputs": {
    "DNSName": {
      "Description": "ELB CNAME",
      "Value": {
        "Fn::GetAtt": [
          "ELB",
          "DNSName"
        ]
      }
    },
    "ELB": {
      "Description": "ELB Id",
      "Value": {
        "Ref": "ELB"
      }
    }
  }
}
