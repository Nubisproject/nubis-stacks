#!/bin/bash
#
# Upload templates and readme files from this repository to an s3 bucket
# This should be run from the directory containing the files you wish to upload
#

# Set some defaults
#+ If you have a variables file it can be used to override these
#+ Options given from the command line always get precidence
S3_BUCKET='nubis-stacks'
S3_PATH='master'

if [ "$AWS_DEFAULT_REGION" == "" ]; then
    AWS_DEFAULT_REGION="us-west-2"
fi

# Multi region S3 disabled by default
S3_MULTI_REGION=0

# Source the variables file if it exists
#+ Options given from the command line always get precidence
if [ -f "bin/variables" ]; then
    source 'bin/variables'
fi

declare -a FILES_LIST

validate-file () {
    echo -n "Validating $1: "
    aws --region $AWS_DEFAULT_REGION cloudformation validate-template --template-body file://"$1" > /dev/null
    if [ "$?" = "0" ]; then
        echo "Passed"
        FILES_LIST=("${FILES_LIST[@]}" $1)
    else
        echo "Failed! Excluding from upload."
    fi
}

get_files_list () {
    # Find all files that are not part of automation or configuration
    FILES=$(find . \
                -name . -a -type d -o \
                -name .git -a -type d -prune -o \
                -name bin -a -type d -prune -o \
                -name nubis -a -type d -prune -o \
                -name lambda -a -type d -prune -o \
                -name parameters -a -type d -prune -o \
                -name vpc -a -type d -o \
                -name README.md -a -type f -o \
                -name CHANGELOG.md -a -type f -o \
                -name LICENSE -a -type f -o \
                -name parameters.json-dist -a -type f -o \
                -name template-dist -a -type f -o \
                -name .gitignore -a -type f -o \
                -print | sed 's|^./||')

    # Include all markdown (README.md) files
    for FILE in $FILES; do
        if [[ $FILE == *\.README.md ]]; then
            FILES_LIST=("${FILES_LIST[@]}" $FILE)
        fi
    done

    # Include all template files that pass validation
    for FILE in $FILES; do
        if [[ $FILE == *\.template ]]; then
            validate-file "$FILE"
        fi
    done
}

get_lambda_list () {
    LAMBDA=$(find lambda/ -mindepth 1 -maxdepth 1 -type d | cut -d/ -f2-)
}

push-files () {
    # FILE=/path/to/file/to/upload.tar.gz
    echo "Uploading ${#FILES_LIST[@]} files to $S3_PATH"

    # Determine the destination buckets
    BUCKETS="$S3_BUCKET"
    if [ "$S3_MULTI_REGION" == "1" ]; then
        S3_BUCKET_REGIONS=$( aws --region $AWS_DEFAULT_REGION ec2 describe-regions --query 'Regions[].{Name:RegionName}' --output text | sort )
        for region in ${S3_BUCKET_REGIONS}; do
            BUCKETS="${BUCKETS} ${S3_BUCKET}-$region"
        done
    fi

    COUNT=1
    for FILE in "${FILES_LIST[@]}"; do
        echo "Uploading: $FILE ($COUNT of ${#FILES_LIST[@]})"
        CONTENT_TYPE=$(file --brief --mime-type $FILE)
        MD5=$(openssl md5 -binary < $FILE | base64)

        # Upload the file
        for bucket in $BUCKETS; do
          BUCKET_REGION=$(aws s3api get-bucket-location --bucket $bucket | jq -r .LocationConstraint)
          if [ "$BUCKET_REGION" != "null" ]; then
              BUCKET_REGION_ARGS="--region $BUCKET_REGION"
          fi

          echo -n " - Uploading to $bucket: "

          OUT=$(aws $BUCKET_REGION_ARGS s3api put-object --bucket "$bucket" --acl public-read --content-md5 "$MD5" --content-type "$CONTENT_TYPE" --key ${S3_PATH}/${FILE} --body "$FILE" 2>&1) 2> /dev/null
          RV=$?
          if [ $RV != 0 ]; then
              echo "ERROR: $OUT"
              exit $RV
          else
            echo "OK"
          fi
        done
        let COUNT=$COUNT+1
    done
}

push-lambda () {
    FILES_LIST=()
    for FUNCTION in $LAMBDA; do
        echo "Pushing lambda:$FUNCTION"
        update-lambda-dependencies $FUNCTION
        zip-lambda $FUNCTION
        FILES_LIST=("${FILES_LIST[@]}" lambda/$FUNCTION.zip)
    done

    push-files
}

zip-lambda () {
    echo "Packaging lambda:$1"
    ( cd lambda/$1 && zip -qr ../$1.zip * )
}
update-lambda-dependencies () {
    echo "Updating dependencies for lambda:$1"
    ( cd lambda/$1 && npm update 2>/dev/null )
}

# Grab and setup called options
while [ "$1" != "" ]; do
    case $1 in
        -v | --verbose )
            # For this simple script this will basicaly set -x
            set -x
        ;;
        -b | --bucket )
            # The name of a s3 bucket to upload files to
            S3_BUCKET=$2
            shift
        ;;
        -p | --path )
            # The path in the s3 bucket to upload files to
            # This is intended to support versions of these files
            # There should be one path per release
            S3_PATH=$2
            shift
        ;;
        -m | --multi-region )
            # Should we upload to multiple regions, using <bucket>-<region> naming
            S3_MULTI_REGION=1
        ;;

         -h | -H | --help )
            echo -en "$0\n\n"
            echo -en "Usage: $0 [options] command [file]\n\n"
            echo -en "Commands:\n"
            echo -en "  push [file]        Push files from the local directory to s3\n"
            echo -en "                      If file is given push only that file\n"
            echo -en "                      If no file is given push everything in the directory\n"
            echo -en "  push-lambda [func] Push lambda functions from the local directory to s3\n"
            echo -en "                      If function is given push only that function\n"
            echo -en "                      If no function is given push everything in the directory\n"
            echo -en "Options:\n"
            echo -en "  --help      -h    Print this help information and exit\n"
            echo -en "  --bucket    -b    Specify the s3 bucket to upload to\n"
            echo -en "                      Defaults to '$S3_BUCKET'\n"
            echo -en "  --path      -p    Specify a path to place the files in the s3 bucket\n"
            echo -en "                      Defaults to '$S3_PATH'\n"
            echo -en "  --multi-region -m Upload files to one bucket per region, prefix at --bucket\n"
            echo -en "                       Defaults to not being used\n"
            echo -en "  --verbose   -v    Turn on verbosity, this should be set as the first argument\n"
            echo -en "                      Basically set -x\n\n"
            exit 0
        ;;
        push-files | push )
            # Push file if named otherwise push everything
            if [ -z "$2" ]; then
                get_files_list
            else
                validate-file "$2"
            fi
            push-files
            GOT_COMMAND=1
        ;;
        push-lambda )
            # Push function if named otherwise push everything
            shift
            if [ -z "$*" ]; then
                get_lambda_list
            else
                for POSSIBLE in $*; do
                  if [ -d "lambda/$POSSIBLE" ]; then
                    LAMBDA="$LAMBDA $POSSIBLE"
                  fi
                done
            fi
            push-lambda
            GOT_COMMAND=1
        ;;
    esac
    shift
done

# If we did not get a valid command print the help message
if [ ${GOT_COMMAND:-0} == 0 ]; then
    $0 --help
fi

# fin
