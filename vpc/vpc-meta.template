{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Meta resources like DBParameterGroups, HostedZones, etc...",
  "Parameters": {
    "ServiceName": {
      "Description": "Name of this deployment",
      "AllowedPattern": "^[a-z0-9][a-z0-9-.]*$",
      "Type": "String"
    },
    "TechnicalOwner": {
      "Description": "A valid LDAP email",
      "AllowedPattern": "^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$",
      "Type": "String"
    },
    "NubisDomain": {
      "Description": "The domain used for DHCP search and Route53 HostedZone",
      "Type": "String"
    },
    "StacksVersion": {
      "Description": "Version of the Nubis Stacks",
      "Type": "String",
      "Default": "v1.0.0"
    }
  },
  "Outputs": {
    "HostedZoneId": {
      "Description": "Id of the HostedZone for creating project DNS entries.",
      "Value": {
        "Ref": "HostedZone"
      }
    },
    "HostedZoneName": {
      "Description": "Name of the HostedZone for creating project DNS entries.",
      "Value": {
        "Fn::Join": [
          ".",
          [
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "ServiceName"
            },
            {
              "Ref": "NubisDomain"
            }
          ]
        ]
      }
    },
    "DefaultServerCertificate": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "arn:aws:iam::",
            {
              "Ref": "AWS::AccountId"
            },
            ":server-certificate/",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "ServiceName"
            },
            ".",
            {
              "Ref": "NubisDomain"
            }
          ]
        ]
      }
    },
    "IamRollArn": {
      "Description": "IAM Roll Arn",
      "Value": {
        "Fn::GetAtt": [
          "LambdaIamRole",
          "Arn"
        ]
      }
    },
    "NubisMySQL56ParameterGroup": {
      "Value": {
        "Ref": "NubisMySQL56ParameterGroup"
      }
    },
    "DatadogAccessKey": {
      "Description": "Access key for this user",
      "Value": {
        "Ref": "DatadogUserAccessKey"
      }
    },
    "DatadogSecretKey": {
      "Description": "Secret key for this user",
      "Value": {
        "Fn::GetAtt": [
          "DatadogUserAccessKey",
          "SecretAccessKey"
        ]
      }
    },
    "LambdaUUID": {
      "Description": "UUID Lambda Function",
      "Value": {
        "Fn::GetAtt": [
          "LambdaUUID",
          "Arn"
        ]
      }
    },
    "LambdaLookupStackOutputs": {
      "Description": "LookupStackOutputs Lambda Function",
      "Value": {
        "Fn::GetAtt": [
          "LambdaLookupStackOutputs",
          "Arn"
        ]
      }
    },
    "LambdaLookupNestedStackOutputs": {
      "Description": "LookupNestedStackOutputs Lambda Function",
      "Value": {
        "Fn::GetAtt": [
          "LambdaLookupNestedStackOutputs",
          "Arn"
        ]
      }
    },
    "AdminMFAGroupArn": {
      "Description": "ARN of AdminMFA group",
      "Value": {
        "Fn::GetAtt": [
          "AdminMFAGroup",
          "Arn"
        ]
      }
    }
  },
  "Resources": {
    "HostedZone": {
      "Type": "AWS::Route53::HostedZone",
      "Properties": {
        "HostedZoneConfig": {
          "Comment": {
            "Fn::Join": [
              " ",
              [
                "Hosted zone for",
                {
                  "Ref": "ServiceName"
                }
              ]
            ]
          }
        },
        "Name": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "ServiceName"
              },
              {
                "Ref": "NubisDomain"
              }
            ]
          ]
        },
        "HostedZoneTags": [
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "ServiceName"
            }
          },
          {
            "Key": "TechnicalOwner",
            "Value": {
              "Ref": "TechnicalOwner"
            }
          }
        ]
      }
    },
    "LambdaIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:DescribeStacks",
                    "cloudformation:DescribeStackResources"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "NubisMySQL56ParameterGroup": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Properties": {
        "Description": "Nubis DB Parameter group for MySql 5.6",
        "Family": "MySQL5.6",
        "Parameters": {
          "binlog_cache_size": "32768",
          "binlog_format": "MIXED",
          "character_set_server": "utf8",
          "explicit_defaults_for_timestamp": "1",
          "innodb_buffer_pool_size": "{DBInstanceClassMemory*3/4}",
          "innodb_file_per_table": "1",
          "innodb_flush_method": "O_DIRECT",
          "innodb_log_buffer_size": "8388608",
          "innodb_log_file_size": "134217728",
          "key_buffer_size": "16777216",
          "local_infile": "1",
          "log_output": "TABLE",
          "master-info-repository": "TABLE",
          "max_allowed_packet": "25165824",
          "max_connections": "{DBInstanceClassMemory/12582880}",
          "performance_schema": "0",
          "read_buffer_size": "262144",
          "read_only": "{TrueIfReplica}",
          "read_rnd_buffer_size": "524288",
          "relay_log_info_repository": "TABLE",
          "sync_binlog": "1",
          "table_open_cache_instances": "16",
          "thread_stack": "262144"
        },
        "Tags": [
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "ServiceName"
            }
          },
          {
            "Key": "TechnicalOwner",
            "Value": {
              "Ref": "TechnicalOwner"
            }
          }
        ]
      }
    },
    "Datadog": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "datadogReadOnly",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "autoscaling:Describe*",
                    "cloudtrail:DescribeTrails",
                    "cloudtrail:GetTrailStatus",
                    "cloudwatch:Describe*",
                    "cloudwatch:Get*",
                    "cloudwatch:List*",
                    "ec2:Describe*",
                    "ec2:Get*",
                    "elasticache:Describe*",
                    "elasticache:List*",
                    "elasticloadbalancing:Describe*",
                    "iam:Get*",
                    "iam:List*",
                    "kinesis:Get*",
                    "kinesis:List*",
                    "kinesis:Describe*",
                    "rds:Describe*",
                    "rds:List*",
                    "ses:Get*",
                    "ses:List*",
                    "sns:List*",
                    "sns:Publish",
                    "sqs:GetQueueAttributes",
                    "sqs:ListQueues",
                    "sqs:ReceiveMessage"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "DatadogUserAccessKey": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {
          "Ref": "Datadog"
        }
      }
    },
    "LambdaUUID": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaIamRole",
            "Arn"
          ]
        },
        "Code": {
          "S3Bucket": "nubis-stacks",
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Ref": "StacksVersion"
                },
                "lambda",
                "UUID.zip"
              ]
            ]
          }
        },
        "Runtime": "nodejs",
        "Timeout": "25"
      }
    },
    "LambdaLookupStackOutputs": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaIamRole",
            "Arn"
          ]
        },
        "Code": {
          "S3Bucket": "nubis-stacks",
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Ref": "StacksVersion"
                },
                "lambda",
                "LookupStackOutputs.zip"
              ]
            ]
          }
        },
        "Runtime": "nodejs",
        "Timeout": "25"
      }
    },
    "LambdaLookupNestedStackOutputs": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaIamRole",
            "Arn"
          ]
        },
        "Code": {
          "S3Bucket": "nubis-stacks",
          "S3Key": {
            "Fn::Join": [
              "/",
              [
                {
                  "Ref": "StacksVersion"
                },
                "lambda",
                "LookupNestedStackOutputs.zip"
              ]
            ]
          }
        },
        "Runtime": "nodejs",
        "Timeout": "25"
      }
    },
    "AdminMFAGroup": {
      "Type": "AWS::IAM::Group",
      "Properties": {
        "ManagedPolicyArns": [
          {
            "Ref": "ForceMFA"
          },
          {
            "Ref": "NubisAdmin"
          }
        ]
      }
    },
    "ForceMFA": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "A policy to enforce MFA on admin accounts",
        "Path": "/",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AllowAllUsersToListAccounts",
              "Effect": "Allow",
              "Action": [
                "iam:ListUsers",
                "iam:ListAccountAliases"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":user/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Sid": "AllowIndividualUserToSeeTheirAccountInformation",
              "Effect": "Allow",
              "Action": [
                "iam:ChangePassword",
                "iam:CreateLoginProfile",
                "iam:DeleteLoginProfile",
                "iam:GetAccountPasswordPolicy",
                "iam:GetAccountSummary",
                "iam:GetLoginProfile",
                "iam:UpdateLoginProfile"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":user/${aws:username}"
                    ]
                  ]
                }
              ]
            },
            {
              "Sid": "AllowIndividualUserToListTheirMFA",
              "Effect": "Allow",
              "Action": [
                "iam:ListVirtualMFADevices",
                "iam:ListMFADevices"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowIndividualUserToManageThierMFA",
              "Effect": "Allow",
              "Action": [
                "iam:CreateVirtualMFADevice",
                "iam:DeactivateMFADevice",
                "iam:DeleteVirtualMFADevice",
                "iam:EnableMFADevice",
                "iam:ResyncMFADevice"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":mfa/${aws:username}"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":user/${aws:username}"
                    ]
                  ]
                }
              ]
            },
            {
              "Sid": "DoNotAllowAnythingOtherThanAboveUnlessMFAd",
              "Effect": "Deny",
              "NotAction": "iam:*",
              "Resource": "*",
              "Condition": {
                "Null": {
                  "aws:MultiFactorAuthAge": "true"
                }
              }
            }
          ]
        }
      }
    },
    "NubisAdmin": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DependsOn": "ForceMFA",
      "Properties": {
        "Description": "Nubis Admin",
        "Path": "/",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "*",
              "Resource": "*"
            }
          ]
        }
      }
    }
  }
}
