{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "EC2 Stack with; SecurityGroup, LaunchConfiguration and AutoScalingGroup",
  "Parameters": {
    "StackName": {
      "Description": "Name of the parent stack",
      "AllowedPattern": "^[a-zA-Z][a-zA-Z0-9-]{0,254}$",
      "ConstraintDescription": "A stack name can contain only alphanumeric characters (case sensitive) and hyphens. It must start with an alphabetic character and cannot be longer than 255 characters.",
      "Type": "String"
    },
    "ServiceName": {
      "Description": "Name of this deployment",
      "AllowedPattern": "^[a-z0-9][a-z0-9-.]*$",
      "Type": "String"
    },
    "TechnicalOwner": {
      "Description": "A valid LDAP email",
      "AllowedPattern": "^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$",
      "Type": "String"
    },
    "Environment": {
      "Description": "Environment we are deploying into",
      "Default": "sandbox",
      "Type": "String",
      "AllowedValues": [
        "prod",
        "stage",
        "sandbox"
      ],
      "ConstraintDescription": "Must specify prod, stage, or sandbox."
    },
    "AmiId": {
      "Description": "The id of the ami for this region",
      "AllowedPattern": "^ami-[0-9a-f]{8}$",
      "Type": "String"
    },
    "SSHKeyName": {
      "Description": "Existing ssh key to deploy to instances",
      "Type": "String"
    },
    "NubisDomain": {
      "Description": "The domain used to discover the consul endpoint",
      "Default": "nubis.allizom.org",
      "AllowedPattern": "^[0-9a-z\\-\\.]+$",
      "Type": "String"
    },
    "InstanceType": {
      "Description": "EC2 Instance type",
      "Type": "String",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge"
      ],
      "NoEcho": "true"
    },
    "ELB": {
      "Description": "ELB Endpoint",
      "Type": "String",
      "Default": ""
    },
    "AutoScalingGroupMinSize": {
      "Description": "ELB Endpoint",
      "AllowedPattern": "^[0-9]+$",
      "Type": "String",
      "Default": "1"
    },
    "AutoScalingGroupDesiredCapacity": {
      "Description": "ELB Endpoint",
      "AllowedPattern": "^[0-9]+$",
      "Type": "String",
      "Default": "1"
    },
    "AutoScalingGroupMaxSize": {
      "Description": "ELB Endpoint",
      "Type": "String",
      "AllowedPattern": "^[0-9]+$",
      "Default": "2"
    },
    "Migrate": {
      "Description": "Set the migrate flag to 1 or 0",
      "Type": "String",
      "AllowedValues": [
        0,
        1
      ],
      "Default": "1"
    },
    "IamInstanceProfile": {
      "Description": "IAM Instance Profile to attach to the instance",
      "Type": "String",
      "Default": ""
    },
    "SubnetLocation": {
      "Description": "Places your instance in the public or private subnet",
      "Type": "String",
      "AllowedValues": [
        "public",
        "private"
      ],
      "Default": "private"
    },
    "ConsulToken": {
      "Description": "Optionnal ACL Token for Consul",
      "Type": "String",
      "Default": "anonymous"
    },
    "SecurityGroup": {
      "Description": "Optionnal Security Group for instances",
      "Type": "String",
      "Default": ""
    }
  },
  "Conditions": {
    "NotSet_IamInstanceProfile": {
      "Fn::Equals": [
        {
          "Ref": "IamInstanceProfile"
        },
        ""
      ]
    },
    "NotSet_ELB": {
      "Fn::Equals": [
        {
          "Ref": "ELB"
        },
        ""
      ]
    },
    "NotSet_SecurityGroup": {
      "Fn::Equals": [
        {
          "Ref": "SecurityGroup"
        },
        ""
      ]
    },
    "SubnetLocationPublic": {
      "Fn::Equals": [
        {
          "Ref": "SubnetLocation"
        },
        "public"
      ]
    },
    "SubnetLocationPrivate": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "SubnetLocation"
            },
            "public"
          ]
        }
      ]
    }
  },
  "Resources": {
    "VpcInfo": {
      "Type": "Custom::VpcInfo",
      "Properties": {
        "ServiceToken": {
          "Fn::Join": [
            "",
            [
              "arn:aws:lambda:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":function:",
              "LookupNestedStackOutputs"
            ]
          ]
        },
        "StackName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::Region"
              },
              "vpc"
            ]
          ]
        },
        "Environment": {
          "Ref": "Environment"
        }
      }
    },
    "EC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Condition": "NotSet_SecurityGroup",
      "Properties": {
        "GroupDescription": "Inbound traffic rules",
        "VpcId": {
          "Fn::GetAtt": [
            "VpcInfo",
            "VpcId"
          ]
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "ServiceName"
            }
          },
          {
            "Key": "TechnicalOwner",
            "Value": {
              "Ref": "TechnicalOwner"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Purpose",
            "Value": "Web Server Security Group"
          },
          {
            "Key": "Backups",
            "Value": "Nightly"
          },
          {
            "Key": "Shutdown",
            "Value": "Never"
          }
        ]
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": {
          "Fn::If": [
            "SubnetLocationPublic",
            "true",
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "ImageId": {
          "Ref": "AmiId"
        },
        "SecurityGroups": [
           {
           "Fn::If": [
            "NotSet_SecurityGroup",
            { "Ref": "EC2SecurityGroup" },
            { "Ref": "SecurityGroup" }
          ]},
          {
            "Fn::GetAtt": [
              "VpcInfo",
              "InternetAccessSecurityGroupId"
            ]
          },
          {
            "Fn::GetAtt": [
              "VpcInfo",
              "SharedServicesSecurityGroupId"
            ]
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "SSHKeyName"
        },
        "IamInstanceProfile": {
          "Fn::If": [
            "NotSet_IamInstanceProfile",
            {
              "Ref": "AWS::NoValue"
            },
            {
              "Ref": "IamInstanceProfile"
            }
          ]
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                {
                  "Fn::Join": [
                    "",
                    [
                      "NUBIS_STACK='",
                      {
                        "Ref": "StackName"
                      },
                      "'"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "NUBIS_PROJECT='",
                      {
                        "Ref": "ServiceName"
                      },
                      "'"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "NUBIS_ENVIRONMENT='",
                      {
                        "Ref": "Environment"
                      },
                      "'"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "NUBIS_DOMAIN='",
                      {
                        "Ref": "NubisDomain"
                      },
                      "'"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "NUBIS_MIGRATE='",
                      {
                        "Ref": "Migrate"
                      },
                      "'"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "CONSUL_ACL_TOKEN='",
                      {
                        "Ref": "ConsulToken"
                      },
                      "'"
                    ]
                  ]
                }
              ]
            ]
          }
        }
      }
    },
    "AutoScalingGroupPublic": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Condition": "SubnetLocationPublic",
      "UpdatePolicy": {
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": "true"
        },
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "WaitOnResourceSignals": "false",
          "PauseTime": "PT1M"
        }
      },
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Fn::GetAtt": [
              "VpcInfo",
              "PublicSubnetAZ1"
            ]
          },
          {
            "Fn::GetAtt": [
              "VpcInfo",
              "PublicSubnetAZ2"
            ]
          },
          {
            "Fn::GetAtt": [
              "VpcInfo",
              "PublicSubnetAZ3"
            ]
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "MinSize": {
          "Ref": "AutoScalingGroupMinSize"
        },
        "DesiredCapacity": {
          "Ref": "AutoScalingGroupDesiredCapacity"
        },
        "MaxSize": {
          "Ref": "AutoScalingGroupMaxSize"
        },
        "LoadBalancerNames": [
          {
            "Fn::If": [
              "NotSet_ELB",
              {
                "Ref": "AWS::NoValue"
              },
              {
                "Ref": "ELB"
              }
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "ServiceName"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "ServiceName"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "TechnicalOwner",
            "Value": {
              "Ref": "TechnicalOwner"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Purpose",
            "Value": "Web Server",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Backups",
            "Value": "Nightly",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Shutdown",
            "Value": "Never",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Condition": "SubnetLocationPrivate",
      "UpdatePolicy": {
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": "true"
        },
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "WaitOnResourceSignals": "false",
          "PauseTime": "PT1M"
        }
      },
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Fn::GetAtt": [
              "VpcInfo",
              "PrivateSubnetAZ1"
            ]
          },
          {
            "Fn::GetAtt": [
              "VpcInfo",
              "PrivateSubnetAZ2"
            ]
          },
          {
            "Fn::GetAtt": [
              "VpcInfo",
              "PrivateSubnetAZ3"
            ]
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "MinSize": {
          "Ref": "AutoScalingGroupMinSize"
        },
        "DesiredCapacity": {
          "Ref": "AutoScalingGroupDesiredCapacity"
        },
        "MaxSize": {
          "Ref": "AutoScalingGroupMaxSize"
        },
        "LoadBalancerNames": [
          {
            "Fn::If": [
              "NotSet_ELB",
              {
                "Ref": "AWS::NoValue"
              },
              {
                "Ref": "ELB"
              }
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "ServiceName"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "ServiceName"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "TechnicalOwner",
            "Value": {
              "Ref": "TechnicalOwner"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Purpose",
            "Value": "Web Server",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Backups",
            "Value": "Nightly",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Shutdown",
            "Value": "Never",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    }
  },
  "Outputs": {
    "EC2SecurityGroup": {
      "Condition": "NotSet_SecurityGroup",
      "Description": "EC2SecurityGroup Id",
      "Value": {
        "Ref": "EC2SecurityGroup"
      }
    },
    "GroupId": {
      "Condition": "NotSet_SecurityGroup",
      "Description": "EC2SecurityGroup Group Id",
      "Value": {
        "Fn::GetAtt": [
          "EC2SecurityGroup",
          "GroupId"
        ]
      }
    },
    "AutoScalingGroupPublic": {
      "Description": "Public AutoScalingGroup Name",
      "Condition": "SubnetLocationPublic",
      "Value": {
        "Ref": "AutoScalingGroupPublic"
      }
    },
    "AutoScalingGroup": {
      "Description": "AutoScalingGroup Name",
      "Condition": "SubnetLocationPrivate",
      "Value": {
        "Ref": "AutoScalingGroup"
      }
    },
    "SubnetLocation": {
      "Description": "Location of vpc subnet, public or private",
      "Value": {
        "Ref": "SubnetLocation"
      }
    }
  }
}
